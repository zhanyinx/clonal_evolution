/**************************** Basic parameters ****************************/
process.executor = 'pbspro'
process.queue = 'workq'

singularity.runOptions = ' --bind /hpcnfs/ '


process {
   withName: 'citup' {
      container = 'docker://yinxiu/citup:latest'
   }
}

params {

   // input output
   input                      = null
   outdir                     = null

   // references
   build                      = 'hg38' // hg19 or hg38
   fasta                      = '' // genome fasta file
   target                     = '' // target file, if whole genome, put a bed file with chromosome, start end (e.g. chr1 1 248956422)

   // Boilerplate options
   publish_dir_mode           = 'copy'
   email_on_fail              = null
   plaintext_email            = false
   monochrome_logs            = false
   hook_url                   = null
   help                       = false
   version                    = false
   validate_params            = true
   show_hidden_params         = false
   schema_ignore_params       = 'genomes'

   // ascat
   ascat_genome_basedir        = '/hpcnfs/scratch/temporary/public_databases/'  // ascat annotation basedir
   ascat_ploidy                = null  // default value for ASCAT
   ascat_min_base_qual         = 20    // default value for ASCAT
   ascat_min_counts            = 10    // default value for ASCAT
   ascat_min_map_qual          = 35    // default value for ASCAT
   ascat_purity                = null  // default value for ASCAT

   // pyclone
   num_clusters                = 10    // Number of clusters to use in variational approximation distribution. Default is 10.
   num_restarts                = 20    // Number random restarts of Variational inference. Default is 20.

   // timescape
   timescape_sorting           = 'null'    // temporal progression of samples. 2 columns file. Columns 1 is the sorting order (numeric). Column 2 are the corresponding maf file basename.

}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        conda.enabled          = false
        process.container = 'docker://yinxiu/clonal_evolution:latest'
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = 'clonal_evolution'
    author          = """Yinxiu Zhan"""
    homePage        = 'https://github.com/zhanyinx/clonal_evolution'
    description     = """Clonal evolution pipeline."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}



/**************************** Tower ****************************************************/
tower {
  enabled = false
}


/**************************** Configs ****************************************************/
includeConfig 'config/ascat.config'
includeConfig 'config/genomes.config'
includeConfig 'config/base.config'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}